generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  avatar    String?
  isAdmin   Boolean @default(false)
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  coursesCreated    Course[]      @relation("CreatedCourses")
  courseEnrollments Enrollment[]
  payments          Payment[]
  couponUsages      CouponUsage[]
  reviews           Review[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  courses   Course[]
  isDeleted Boolean  @default(false)
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  price       Int     @default(0)
  isFree      Boolean @default(false)

  authorId String
  author   User   @relation("CreatedCourses", fields: [authorId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  lessons     Lesson[]
  enrollments Enrollment[]
  payments    Payment[]
  coupons     Coupon[]     @relation("CouponCourses")
  reviews     Review[]

  isDeleted Boolean @default(false)

  features  String[] @default([])
  overviews String[] @default([])
  stack     String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  duration  String
  videoUrl  String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
  enrolledAt DateTime @default(now())
  isDeleted  Boolean  @default(false)
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  amount        Int
  currency      String
  phone         String
  status        PaymentStatus @default(PENDING)
  provider      String
  transactionId String        @unique
  paidAt        DateTime      @default(now())

  user      User    @relation(fields: [userId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
  isDeleted Boolean @default(false)
}

model Coupon {
  id        String        @id @default(cuid())
  code      String        @unique
  discount  Int
  expiresAt DateTime
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  courses   Course[]      @relation("CouponCourses")
  usages    CouponUsage[]
  isDeleted Boolean       @default(false)
}

model CouponUsage {
  id       String   @id @default(cuid())
  userId   String
  couponId String
  usedAt   DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  coupon    Coupon  @relation(fields: [couponId], references: [id])
  isDeleted Boolean @default(false)
}

model Review {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  score     Int
  comment   String?
  createdAt DateTime @default(now())

  course    Course  @relation(fields: [courseId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  isDeleted Boolean @default(false)
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
