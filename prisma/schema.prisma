// This is the Prisma schema file. It defines your database models and their relationships.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for managing user data and authentication.
model User {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  avatar    String
  phone     String
  isAdmin   Boolean @default(false)
  isDeleted Boolean @default(false)

  // Relationships
  // A user can create many courses.
  coursesCreated    Course[]         @relation("CreatedCourses")
  // A user can enroll in many courses.
  courseEnrollments Enrollment[]
  // A user can make many payments.
  payments          Payment[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// Category model for organizing courses.
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  // A category can have many courses.
  courses   Course[]
  isDeleted Boolean  @default(false)
}

// Course model for course details and structure.
model Course {
  id                    String  @id @default(cuid())
  title                 String
  description           String
  thumbnail             String
  overviewVideo         String
  price                 Int    
  isFree                Boolean 
  categoryId            String
  authorId              String

  // Relationships
  // A course consists of many lessons.
  lessons     Lesson[]
  // A course can have many enrollments.
  enrollments Enrollment[]
  // A course can receive many payments.
  payments    Payment[]
  // A course can have many reviews.
  reviews     Review[]
  // Relation to the User who created the course.
  author      User         @relation("CreatedCourses", fields: [authorId], references: [id])
  // Relation to the course's category.
  category    Category     @relation(fields: [categoryId], references: [id])

  isDeleted Boolean @default(false)

  features  String[] @default([])
  overviews String[] @default([])
  stack     String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Lesson model, which is a part of a course.
model Lesson {
  id            String @id @default(cuid())
  title         String
  duration      String
  video         String
  courseId      String
  // Relation to the parent course.
  course        Course @relation(fields: [courseId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isDeleted      Boolean          @default(false)
  lessonProgress LessonProgress[]
}

model LessonProgress {
  id        String  @id @default(cuid())
  userId    String
  lessonId  String
  courseId  String
  completed Boolean @default(false)
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

// Enrollment model to track which user is enrolled in which course.
model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  // Relation to the enrolled user.
  user       User     @relation(fields: [userId], references: [id])
  // Relation to the enrolled course.
  course     Course   @relation(fields: [courseId], references: [id])
  enrolledAt DateTime @default(now())
  isDeleted  Boolean  @default(false)
}

// Payment model to record transaction details.
model Payment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  amount        Int
  currency      String
  phone         String
  status        PaymentStatus @default(PENDING)
  provider      String
  transactionId String        @unique
  paidAt        DateTime      @default(now())

  // Relation to the user who made the payment.
  user      User    @relation(fields: [userId], references: [id])
  // Relation to the course being paid for.
  course    Course  @relation(fields: [courseId], references: [id])
  isDeleted Boolean @default(false)
}

// Review model for user feedback on courses.
model Review {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  ratings   Int
  comment   String
  createdAt DateTime @default(now())

  // Relation to the course being reviewed.
  course    Course  @relation(fields: [courseId], references: [id])
  isDeleted Boolean @default(false)
}

// Enum for payment statuses.
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
