// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  password          String
  avatar            String?
  isAdmin           Boolean       @default(false)
  isActive          Boolean       @default(true)
  coursesCreated    Course[]      @relation("CreatedCourses")
  courseEnrollments Enrollment[] // Courses the user enrolled in
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Payment           Payment[]
  CouponUsage       CouponUsage[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  price       Int          @default(0)
  isFree      Boolean      @default(false)
  authorId    String
  author      User         @relation("CreatedCourses", fields: [authorId], references: [id])
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Payment     Payment[]
  coupons     Coupon[]     @relation("CouponCourses")
  couponId    String?
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  duration  String
  videoUrl  String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
  enrolledAt DateTime @default(now())
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  amount        Int // in cents if using Stripe or other providers
  currency      String
  phone         String
  status        PaymentStatus @default(PENDING)
  provider      String // e.g. "stripe", "paypal", etc.
  transactionId String        @unique // transaction ID from payment gateway
  paidAt        DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  course        Course        @relation(fields: [courseId], references: [id])
}

model Coupon {
  id          String        @id @default(cuid())
  code        String        @unique
  discount    Int
  expiresAt   DateTime
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  courses     Course[]      @relation("CouponCourses")
  CouponUsage CouponUsage[]
}

model CouponUsage {
  id       String   @id @default(cuid())
  userId   String
  couponId String
  usedAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
